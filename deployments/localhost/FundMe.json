{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "i_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundersIndex",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8638f5f17c077d4d41853f41372195ad9f34fddc76fcab9e2b490cd6ca30bd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "989204",
    "logsBloom": "0x
    "blockHash": "0x8ed24f0be0019edeb17b4d21ff5ff2f7b890f5a5878ef6b50b6acb93a660fadb",
    "transactionHash": "0xb8638f5f17c077d4d41853f41372195ad9f34fddc76fcab9e2b490cd6ca30bd9",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "989204",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "00ab7fc4e661ce62d21c91cc1b3b86eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"i_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundersIndex\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdulbasit Akingbade\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Style Guide\\n// Pragma\\npragma solidity ^0.8.0;\\n// Imports\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Abdulbasit Akingbade\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address private immutable i_owner;\\n    AggregatorV3Interface private immutable i_priceFeed;\\n\\n    // Events\\n    event Funded(address indexed funder, uint256 amount);\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(i_owner == msg.sender, \\\"Sender is not the owner\\\");\\n        if (i_owner != msg.sender) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    // 1. constructor\\n    // 2. external functions\\n    // 3. public functions\\n    // 4. internal functions\\n    // 5. private functions\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n    constructor(address i_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        i_priceFeed = AggregatorV3Interface(i_priceFeedAddress);\\n    }\\n\\n    // // solidity magic function that gets called when a user sends ether to\\n    // //      the contract adderss without calling the fund function\\n    // // receive function is called when the data parameter is empty\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // // solidity magic function that gets called when a user sends ether to\\n    // //      the contract adderss without calling the fund function\\n    // // fallback function is called when the data parameter is not empty\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(i_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to send more ETH\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n        emit Funded(msg.sender, msg.value);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 index = 0; index < s_funders.length; index++) {\\n            address funder = s_funders[index];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        // Send the coin from the contract address wallet to the person's calling this function\\n        // Can use transfer, send or call\\n        (bool onSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(onSuccess, \\\"Transfer failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // Note: mappings can't be in memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        // Send the coin from the contract address wallet to the person's calling this function\\n        // Can use transfer, send or call\\n        (bool onSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(onSuccess, \\\"Transfer failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 fundersIndex) public view returns (address) {\\n        return s_funders[fundersIndex];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return i_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x630600b5630f633129b99e9dc5cd0879a2df70b5107e6d52552ab98dbe9bb380\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    /*function getVersion() internal view returns (uint256) {\\r\\n        // ABI interface and address\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n        );\\r\\n\\r\\n        return priceFeed.version();\\r\\n    }*/\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint ethAmt,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmt) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6cfab26a0329a6f7949294f59995cdedcf8764e38301c64e19e361b01f6a2b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200127438038062001274833981810160405281019062000037919062000110565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d882620000ab565b9050919050565b620000ea81620000cb565b8114620000f657600080fd5b50565b6000815190506200010a81620000df565b92915050565b600060208284031215620001295762000128620000a6565b5b60006200013984828501620000f9565b91505092915050565b60805160a0516110f062000184600039600081816104bc01526104ef01526000818161025c0152818161049401528181610680015261085f01526110f06000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610b02565b6101b3565b6040516100b49190610b48565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b8f565b6101fc565b6040516100f19190610bcb565b60405180910390f35b34801561010657600080fd5b5061010f610243565b005b34801561011d57600080fd5b50610126610483565b6040516101339190610b48565b60405180910390f35b34801561014857600080fd5b50610151610490565b60405161015e9190610bcb565b60405180910390f35b34801561017357600080fd5b5061017c6104b8565b6040516101899190610c45565b60405180910390f35b61019a6104e0565b005b3480156101a857600080fd5b506101b1610667565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061021157610210610c60565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103735760008082815481106102ed576102ec610c60565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036b90610cbe565b9150506102cb565b50600067ffffffffffffffff81111561038f5761038e610d06565b5b6040519080825280602002602001820160405280156103bd5781602001602082028036833780820191505090505b50600090805190602001906103d39291906109f8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103fa90610d66565b60006040518083038185875af1925050503d8060008114610437576040519150601f19603f3d011682016040523d82523d6000602084013e61043c565b606091505b5050905080610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790610dd8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b188000061051d7f00000000000000000000000000000000000000000000000000000000000000003461092b90919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610e44565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ad9190610e64565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5243460405161065d9190610b48565b60405180910390a2565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610725575b5050505050905060005b81518110156107fa57600082828151811061079757610796610c60565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f290610cbe565b915050610779565b50600067ffffffffffffffff81111561081657610815610d06565b5b6040519080825280602002602001820160405280156108445781602001602082028036833780820191505090505b506000908051906020019061085a9291906109f8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108a190610d66565b60006040518083038185875af1925050503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b5050905080610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90610dd8565b60405180910390fd5b5050565b60008061093783610967565b90506000670de0b6b3a764000085836109509190610e98565b61095a9190610f09565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190610fc7565b5050509150506402540be400816109f09190611042565b915050919050565b828054828255906000526020600020908101928215610a71579160200282015b82811115610a705782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a18565b5b509050610a7e9190610a82565b5090565b5b80821115610a9b576000816000905550600101610a83565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acf82610aa4565b9050919050565b610adf81610ac4565b8114610aea57600080fd5b50565b600081359050610afc81610ad6565b92915050565b600060208284031215610b1857610b17610a9f565b5b6000610b2684828501610aed565b91505092915050565b6000819050919050565b610b4281610b2f565b82525050565b6000602082019050610b5d6000830184610b39565b92915050565b610b6c81610b2f565b8114610b7757600080fd5b50565b600081359050610b8981610b63565b92915050565b600060208284031215610ba557610ba4610a9f565b5b6000610bb384828501610b7a565b91505092915050565b610bc581610ac4565b82525050565b6000602082019050610be06000830184610bbc565b92915050565b6000819050919050565b6000610c0b610c06610c0184610aa4565b610be6565b610aa4565b9050919050565b6000610c1d82610bf0565b9050919050565b6000610c2f82610c12565b9050919050565b610c3f81610c24565b82525050565b6000602082019050610c5a6000830184610c36565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc982610b2f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cfb57610cfa610c8f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d50600083610d35565b9150610d5b82610d40565b600082019050919050565b6000610d7182610d43565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610dc2600f83610d7b565b9150610dcd82610d8c565b602082019050919050565b60006020820190508181036000830152610df181610db5565b9050919050565b7f596f75206e65656420746f2073656e64206d6f72652045544800000000000000600082015250565b6000610e2e601983610d7b565b9150610e3982610df8565b602082019050919050565b60006020820190508181036000830152610e5d81610e21565b9050919050565b6000610e6f82610b2f565b9150610e7a83610b2f565b9250828201905080821115610e9257610e91610c8f565b5b92915050565b6000610ea382610b2f565b9150610eae83610b2f565b9250828202610ebc81610b2f565b91508282048414831517610ed357610ed2610c8f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1482610b2f565b9150610f1f83610b2f565b925082610f2f57610f2e610eda565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5981610f3a565b8114610f6457600080fd5b50565b600081519050610f7681610f50565b92915050565b6000819050919050565b610f8f81610f7c565b8114610f9a57600080fd5b50565b600081519050610fac81610f86565b92915050565b600081519050610fc181610b63565b92915050565b600080600080600060a08688031215610fe357610fe2610a9f565b5b6000610ff188828901610f67565b955050602061100288828901610f9d565b945050604061101388828901610fb2565b935050606061102488828901610fb2565b925050608061103588828901610f67565b9150509295509295909350565b600061104d82610f7c565b915061105883610f7c565b925082820261106681610f7c565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561109e5761109d610c8f565b5b82820584148315176110b3576110b2610c8f565b5b509291505056fea264697066735822122029b732fdca3f634c708f0a1a200173164cf41da28a7093b6f9e30f0b088c17c364736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780639e87a5cd14610167578063b60d428814610192578063be2693f01461019c5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610111575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610b02565b6101b3565b6040516100b49190610b48565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610b8f565b6101fc565b6040516100f19190610bcb565b60405180910390f35b34801561010657600080fd5b5061010f610243565b005b34801561011d57600080fd5b50610126610483565b6040516101339190610b48565b60405180910390f35b34801561014857600080fd5b50610151610490565b60405161015e9190610bcb565b60405180910390f35b34801561017357600080fd5b5061017c6104b8565b6040516101899190610c45565b60405180910390f35b61019a6104e0565b005b3480156101a857600080fd5b506101b1610667565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061021157610210610c60565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146102c8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103735760008082815481106102ed576102ec610c60565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061036b90610cbe565b9150506102cb565b50600067ffffffffffffffff81111561038f5761038e610d06565b5b6040519080825280602002602001820160405280156103bd5781602001602082028036833780820191505090505b50600090805190602001906103d39291906109f8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103fa90610d66565b60006040518083038185875af1925050503d8060008114610437576040519150601f19603f3d011682016040523d82523d6000602084013e61043c565b606091505b5050905080610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790610dd8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6802b5e3af16b188000061051d7f00000000000000000000000000000000000000000000000000000000000000003461092b90919063ffffffff16565b101561055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610e44565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ad9190610e64565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a5243460405161065d9190610b48565b60405180910390a2565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146106ec576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610725575b5050505050905060005b81518110156107fa57600082828151811061079757610796610c60565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f290610cbe565b915050610779565b50600067ffffffffffffffff81111561081657610815610d06565b5b6040519080825280602002602001820160405280156108445781602001602082028036833780820191505090505b506000908051906020019061085a9291906109f8565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108a190610d66565b60006040518083038185875af1925050503d80600081146108de576040519150601f19603f3d011682016040523d82523d6000602084013e6108e3565b606091505b5050905080610927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091e90610dd8565b60405180910390fd5b5050565b60008061093783610967565b90506000670de0b6b3a764000085836109509190610e98565b61095a9190610f09565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190610fc7565b5050509150506402540be400816109f09190611042565b915050919050565b828054828255906000526020600020908101928215610a71579160200282015b82811115610a705782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a18565b5b509050610a7e9190610a82565b5090565b5b80821115610a9b576000816000905550600101610a83565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acf82610aa4565b9050919050565b610adf81610ac4565b8114610aea57600080fd5b50565b600081359050610afc81610ad6565b92915050565b600060208284031215610b1857610b17610a9f565b5b6000610b2684828501610aed565b91505092915050565b6000819050919050565b610b4281610b2f565b82525050565b6000602082019050610b5d6000830184610b39565b92915050565b610b6c81610b2f565b8114610b7757600080fd5b50565b600081359050610b8981610b63565b92915050565b600060208284031215610ba557610ba4610a9f565b5b6000610bb384828501610b7a565b91505092915050565b610bc581610ac4565b82525050565b6000602082019050610be06000830184610bbc565b92915050565b6000819050919050565b6000610c0b610c06610c0184610aa4565b610be6565b610aa4565b9050919050565b6000610c1d82610bf0565b9050919050565b6000610c2f82610c12565b9050919050565b610c3f81610c24565b82525050565b6000602082019050610c5a6000830184610c36565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc982610b2f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cfb57610cfa610c8f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d50600083610d35565b9150610d5b82610d40565b600082019050919050565b6000610d7182610d43565b9150819050919050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610dc2600f83610d7b565b9150610dcd82610d8c565b602082019050919050565b60006020820190508181036000830152610df181610db5565b9050919050565b7f596f75206e65656420746f2073656e64206d6f72652045544800000000000000600082015250565b6000610e2e601983610d7b565b9150610e3982610df8565b602082019050919050565b60006020820190508181036000830152610e5d81610e21565b9050919050565b6000610e6f82610b2f565b9150610e7a83610b2f565b9250828201905080821115610e9257610e91610c8f565b5b92915050565b6000610ea382610b2f565b9150610eae83610b2f565b9250828202610ebc81610b2f565b91508282048414831517610ed357610ed2610c8f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1482610b2f565b9150610f1f83610b2f565b925082610f2f57610f2e610eda565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5981610f3a565b8114610f6457600080fd5b50565b600081519050610f7681610f50565b92915050565b6000819050919050565b610f8f81610f7c565b8114610f9a57600080fd5b50565b600081519050610fac81610f86565b92915050565b600081519050610fc181610b63565b92915050565b600080600080600060a08688031215610fe357610fe2610a9f565b5b6000610ff188828901610f67565b955050602061100288828901610f9d565b945050604061101388828901610fb2565b935050606061102488828901610fb2565b925050608061103588828901610f67565b9150509295509295909350565b600061104d82610f7c565b915061105883610f7c565b925082820261106681610f7c565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561109e5761109d610c8f565b5b82820584148315176110b3576110b2610c8f565b5b509291505056fea264697066735822122029b732fdca3f634c708f0a1a200173164cf41da28a7093b6f9e30f0b088c17c364736f6c63430008120033",
  "devdoc": {
    "author": "Abdulbasit Akingbade",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}